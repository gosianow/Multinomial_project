
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #######################################################
> 
> # Created 11 Sep 2015
> # BioC 3.1
> 
> #######################################################
> 
> 
> setwd("/home/gosia/multinomial_project/simulations_sqtl3_hsapiens_noDE_noNull")
> 
> 
> library(ggplot2)
> library(DM)
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, clusterExport,
    clusterMap, parApply, parCapply, parLapply, parLapplyLB, parRapply, parSapply,
    parSapplyLB

The following object is masked from ‘package:stats’:

    xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, as.vector, cbind, colnames, do.call,
    duplicated, eval, evalq, Filter, Find, get, intersect, is.unsorted, lapply, Map,
    mapply, match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rep.int, rownames, sapply, setdiff, sort, table, tapply, union,
    unique, unlist, unsplit


Attaching package: ‘DM’

The following object is masked from ‘package:BiocGenerics’:

    counts

> 
> 
> DM_out <- DM_plots_out <- "dm_0_2_3_plots/"
> dir.create(DM_plots_out, showWarnings=F, recursive=T)
> 
> results_dm <- "dm_0_2_3/"
> 
> 
> ##############################################################################################################
> # ->>>>>> load results
> ##############################################################################################################
> 
> 
> results <- list()
> 
> 
> ### sqtlseeker
> 
> rt <- read.table(paste0("sqtlseeker_2_0/results_min_dispersion001/results.txt"), header = T, as.is = TRUE)
> head(rt)
           geneId snpId           F nb.groups           md        tr.first       tr.second
1 ENSG00000000003  snp1 0.187246700         2 5.934767e-06 ENST00000496771 ENST00000373020
2 ENSG00000000419  snp3 1.621291158         2 2.879969e-02 ENST00000371582 ENST00000371584
3 ENSG00000000457  snp4 0.429169505         2 1.184807e-02 ENST00000367770 ENST00000470238
4 ENSG00000000460  snp5 2.461170218         2 5.740894e-02 ENST00000359326 ENST00000498289
5 ENSG00000000971  snp7 1.532138187         2 4.453111e-02 ENST00000367429 ENST00000439155
6 ENSG00000001036  snp8 0.008475148         2 7.680261e-04 ENST00000002165 ENST00000451668
  nb.perms         pv        qv
1     2657 0.67644846 0.7872057
2     6494 0.17521170 0.6209091
3     2698 0.66506113 0.7850535
4    35919 0.05487194 0.3803087
5     5587 0.21581961 0.6528840
6     1100 0.93732970 0.8195225
> 
> rt <- rt[, c("geneId", "pv", "qv")]
> 
> colnames(rt) <- c("gene_id", "pvalue", "adj_pvalue")
> 
> results[[1]] <- rt
> 
> 
> 
> ### DM
> 
> rt <- read.table(paste0("dm_0_2_3/results.txt"), header = TRUE, as.is = TRUE)
> 
> head(rt)
          gene_id        lr df     pvalue adj_pvalue
1 ENSG00000000419 3.6545419  2 0.16085195  0.7620158
2 ENSG00000000457 0.9691131  2 0.61597028  0.9998352
3 ENSG00000000460 7.3403379  3 0.06180593  0.4551675
4 ENSG00000000971 2.4196074  2 0.29825582  0.9219793
5 ENSG00000001084 0.9257871  2 0.62945964  0.9998352
6 ENSG00000001460 2.2066968  1 0.13741262  0.7118862
> 
> rt <- rt[,c("gene_id", "pvalue" ,"adj_pvalue")]
> 
> colnames(rt) <- c("gene_id", "pvalue", "adj_pvalue")
> head(rt)
          gene_id     pvalue adj_pvalue
1 ENSG00000000419 0.16085195  0.7620158
2 ENSG00000000457 0.61597028  0.9998352
3 ENSG00000000460 0.06180593  0.4551675
4 ENSG00000000971 0.29825582  0.9219793
5 ENSG00000001084 0.62945964  0.9998352
6 ENSG00000001460 0.13741262  0.7118862
> 
> results[[2]] <- rt  
> 
> 
> 
> split_levels <- data.frame(method = c("sqtlseeker", "DM"))
> 
> #######################################################
> # load simulation info
> #######################################################
> 
> 
> # simulation_details <- read.table("3_truth/simulation_details.txt", header = TRUE, as.is = TRUE)
> 
> load("3_truth/simulation_details.Rdata")
> 
> status <- unique(simulation_details[, c("gene_id", "gene_ds_status")])
> 
> colnames(status) <- c("gene_id", "status")
> 
> 
> #######################################################
> # plot_TPRFDR function
> #######################################################
> 
> 
> 
> 
> plot_TPRFDR <- function(data_TPRFDR, split_levels, plot_levels, facet_levels, plot_colors = NULL, xylim_one = FALSE){
+   
+   split_levels <- split_levels[, c(plot_levels, facet_levels), drop = FALSE]
+   
+   
+   TPRFDRlist <- lapply(1:nrow(split_levels), function(r){
+     # r = 1
+     
+     TPRFDR <- data_TPRFDR[[r]]
+     
+     TPRFDR <- cbind(TPRFDR, split_levels[rep(r, nrow(TPRFDR)), , drop = FALSE])
+     
+     })
+   
+ 
+   TPRFDR <- do.call(rbind, TPRFDRlist)
+   
+   TPRFDR$white <- ifelse(TPRFDR$FDR <= TPRFDR$threshold, NA, TPRFDR$TPR)
+   
+   pointsize <- 2.5
+ 
+   ggp <- ggplot(data = TPRFDR, aes_string(x = "FDR", y = "TPR", group = plot_levels, colour = plot_levels)) +
+   theme_bw() +
+   xlab("FDR") +
+   geom_line(size = 1.5, na.rm=TRUE) +
+   geom_vline(aes(xintercept = threshold), linetype = "dashed") + 
+   geom_point(size = pointsize + 1, shape = 19, na.rm=TRUE) + 
+   geom_point(aes_string(y = "white"), size = pointsize, shape = 21, fill = "white", na.rm=TRUE) + 
+   theme(axis.text=element_text(size = 16), axis.title = element_text(size = 18, face = "bold"), legend.position = "bottom", legend.title = element_blank(), legend.text = element_text(size = 12), strip.text = element_text(size = 12)) +
+   guides(colour = guide_legend(override.aes = list(size = 1.5, shape = NA), nrow = 3)) 
+   
+   if(xylim_one)
+   ggp <- ggp + coord_cartesian(xlim = c(-0.1, 1.1), ylim = c(-0.1, 1.1))
+   
+   if(!is.null(plot_colors) && nlevels(TPRFDR[, plot_levels]) == length(plot_colors))   
+   ggp <- ggp + scale_color_manual(values = plot_colors)
+   else
+   ggp <- ggp + scale_color_manual(values = colorb(nlevels(TPRFDR[, plot_levels])))
+   
+   if(length(facet_levels) == 1)
+   ggp <- ggp + facet_wrap(reformulate(facet_levels[1]))
+   
+   if(length(facet_levels) == 2)
+   ggp <- ggp + facet_grid(reformulate(facet_levels[1], facet_levels[2]))
+ 
+   
+   # pdf("./TPRFDR.pdf")
+   
+   print(ggp)
+ 
+   # dev.off()
+   
+ 
+ }
> 
> 
> #######################################################
> # generate TPR vs achieved FDR plots
> #######################################################
> 
> 
> 
> data_TPRFDR <- DM::calculate_TPRFDR(results, status, thresholds = c(0.01, 0.05, 0.1))
> 
> 
> levels(split_levels$method)
[1] "DM"         "sqtlseeker"
> 
> plot_levels <- "method"
> facet_levels <- numeric()
> 
> plot_colors <- c("dodgerblue3", "orange")
> 
> 
> 
> 
> pdf(paste0(DM_plots_out,"TPRFDR.pdf"), width = 7, height = 7)
> 
> plot_TPRFDR(data_TPRFDR, split_levels, plot_levels, facet_levels, plot_colors = plot_colors, xylim_one = FALSE)
> 
> dev.off()
null device 
          1 
> 
> 
> 
> pdf(paste0(DM_plots_out,"TPRFDR1.pdf"), width = 7, height = 7)
> 
> plot_TPRFDR(data_TPRFDR, split_levels, plot_levels, facet_levels, plot_colors = plot_colors, xylim_one = TRUE)
> 
> dev.off()
null device 
          1 
> 
> 
> 
> 
> 
> #######################################################
> # generate ROC plots
> #######################################################
> 
> 
> 
> data_ROCx <- DM::calculate_ROCx(results, status)
[1] 1
[1] 2
> 
> 
> levels(split_levels$method)
[1] "DM"         "sqtlseeker"
> 
> plot_levels <- "method"
> facet_levels <- numeric()
> 
> plot_colors <- c("dodgerblue3", "orange")
> 
> 
> 
> 
> pdf(paste0(DM_plots_out,"ROC.pdf"), width = 7, height = 7)
> 
> plot_ROCx(data_ROCx, split_levels, plot_levels, facet_levels, plot_colors = plot_colors, xylim_one = FALSE)
> 
> dev.off()
null device 
          1 
> 
> 
> 
> pdf(paste0(DM_plots_out,"ROC1.pdf"), width = 7, height = 7)
> 
> plot_ROCx(data_ROCx, split_levels, plot_levels, facet_levels, plot_colors = plot_colors, xylim_one = TRUE)
> 
> dev.off()
null device 
          1 
> 
> 
> 
> 
> 
> 
> 
> ##############################################################################################################
> # ->>>>>> load results
> ##############################################################################################################
> 
> gene_expr_st1 <- unique(simulation_details[simulation_details$gene_ds_status == 1 , c("gene_id", "expected_gene_count_gr1")])
> 
> 
> gene_expr_st1$gene_expr <- Hmisc::cut2(gene_expr_st1[, 2], g = 3)
> 
> levels(gene_expr_st1$gene_expr)
[1] "[ 500,  1200)" "[1200,  2823)" "[2823,847536]"
> table(gene_expr_st1$gene_expr)

[ 500,  1200) [1200,  2823) [2823,847536] 
          335           332           333 
> 
> 
> gene_expr_st1$gene_expr <- Hmisc::cut2(gene_expr_st1[, 2], cuts = c(1000, 2500))
> 
> levels(gene_expr_st1$gene_expr)
[1] "[   500,  1000)" "[  1000,  2500)" "[  2500,847536]"
> table(gene_expr_st1$gene_expr)

[   500,  1000) [  1000,  2500) [  2500,847536] 
            264             365             371 
> 
> 
> 
> 
> 
> gene_expr <- unique(simulation_details[, c("gene_id", "expected_gene_count_gr1")])
> rownames(gene_expr) <- gene_expr$gene_id
> 
> gene_expr$gene_expr <- Hmisc::cut2(gene_expr[, 2], cuts = c(1000, 2500))
> 
> levels(gene_expr$gene_expr)
[1] "[      0,   1000)" "[   1000,   2500)" "[   2500,1162991]"
> table(gene_expr$gene_expr)

[      0,   1000) [   1000,   2500) [   2500,1162991] 
            14287              3047              3076 
> 
> 
> 
> 
> 
> results <- list()
> 
> 
> ### sqtlseeker
> 
> rt <- read.table(paste0("sqtlseeker_2_0/results_min_dispersion001/results.txt"), header = T, as.is = TRUE)
> head(rt)
           geneId snpId           F nb.groups           md        tr.first       tr.second
1 ENSG00000000003  snp1 0.187246700         2 5.934767e-06 ENST00000496771 ENST00000373020
2 ENSG00000000419  snp3 1.621291158         2 2.879969e-02 ENST00000371582 ENST00000371584
3 ENSG00000000457  snp4 0.429169505         2 1.184807e-02 ENST00000367770 ENST00000470238
4 ENSG00000000460  snp5 2.461170218         2 5.740894e-02 ENST00000359326 ENST00000498289
5 ENSG00000000971  snp7 1.532138187         2 4.453111e-02 ENST00000367429 ENST00000439155
6 ENSG00000001036  snp8 0.008475148         2 7.680261e-04 ENST00000002165 ENST00000451668
  nb.perms         pv        qv
1     2657 0.67644846 0.7872057
2     6494 0.17521170 0.6209091
3     2698 0.66506113 0.7850535
4    35919 0.05487194 0.3803087
5     5587 0.21581961 0.6528840
6     1100 0.93732970 0.8195225
> 
> rt <- rt[, c("geneId", "pv", "qv")]
> 
> colnames(rt) <- c("gene_id", "pvalue", "adj_pvalue")
> 
> results[[1]] <- split(rt, gene_expr[rt$gene_id, "gene_expr"]) 
> 
> 
> 
> ### DM
> 
> rt <- read.table(paste0("dm_0_2_3/results.txt"), header = TRUE, as.is = TRUE)
> 
> head(rt)
          gene_id        lr df     pvalue adj_pvalue
1 ENSG00000000419 3.6545419  2 0.16085195  0.7620158
2 ENSG00000000457 0.9691131  2 0.61597028  0.9998352
3 ENSG00000000460 7.3403379  3 0.06180593  0.4551675
4 ENSG00000000971 2.4196074  2 0.29825582  0.9219793
5 ENSG00000001084 0.9257871  2 0.62945964  0.9998352
6 ENSG00000001460 2.2066968  1 0.13741262  0.7118862
> 
> rt <- rt[,c("gene_id", "pvalue" ,"adj_pvalue")]
> 
> colnames(rt) <- c("gene_id", "pvalue", "adj_pvalue")
> head(rt)
          gene_id     pvalue adj_pvalue
1 ENSG00000000419 0.16085195  0.7620158
2 ENSG00000000457 0.61597028  0.9998352
3 ENSG00000000460 0.06180593  0.4551675
4 ENSG00000000971 0.29825582  0.9219793
5 ENSG00000001084 0.62945964  0.9998352
6 ENSG00000001460 0.13741262  0.7118862
> 
> results[[2]] <- split(rt, gene_expr[rt$gene_id, "gene_expr"])  
> 
> 
> 
> split_levels <- data.frame(method = c("sqtlseeker", "DM"))
> 
> 
> 
> 
>   #######################################################
>   # load simulation info
>   #######################################################
> 
> 
>   load("3_truth/simulation_details.Rdata")
> 
>   status <- unique(simulation_details[, c("gene_id", "gene_ds_status")])
> 
>   colnames(status) <- c("gene_id", "status")
> 
> 
>   status <- split(status, gene_expr[status$gene_id, "gene_expr"])
> 
> 
>   #######################################################
>   # generate TPR vs achieved FDR plots
>   #######################################################
> 
> 
>   data_TPRFDR_list <- list()
> 
>   for(i in 1:3){
+     
+     data_TPRFDR_list[[i]] <- DM::calculate_TPRFDR(results = lapply(results, function(r) r[[i]]), status[[i]], thresholds = c(0.01, 0.05, 0.1))
+ 
+     
+   }
> 
> 
>   data_TPRFDR <- unlist(data_TPRFDR_list, recursive = FALSE)
> 
>   nr_method <- nrow(split_levels)
> 
>   split_levels <- split_levels[rep(1:nrow(split_levels), 3), , drop = FALSE]
>   
>   split_levels$gene_expr <- factor(rep(levels(gene_expr$gene_expr), each = nr_method), levels = levels(gene_expr$gene_expr))
> 
> 
>   levels(split_levels$method)
[1] "DM"         "sqtlseeker"
> 
>   plot_levels <- "method"
>   facet_levels <- c("gene_expr")
> 
>   plot_colors <- c("dodgerblue3", "orange")
> 
> 
> 
>   pdf(paste0(DM_plots_out,"TPRFDR_gene_expr.pdf"), width = 10.5, height = 5)
> 
>   plot_TPRFDR(data_TPRFDR, split_levels, plot_levels, facet_levels, plot_colors = plot_colors, xylim_one = FALSE)
> 
>   dev.off()
null device 
          1 
> 
> 
> 
>   pdf(paste0(DM_plots_out,"TPRFDR_gene_expr1.pdf"), width = 10.5, height = 5)
> 
>   plot_TPRFDR(data_TPRFDR, split_levels, plot_levels, facet_levels, plot_colors = plot_colors, xylim_one = TRUE)
> 
>   dev.off()
null device 
          1 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
 17.277   1.075  18.472 
